/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { DashboarGrapheDTO } from '../model/dashboarGrapheDTO';
import { GrapheDTO } from '../model/grapheDTO';
import { Mapstringdouble } from '../model/mapstringdouble';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ChartControllerService {

    protected basePath = '//localhost:8075/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * catlist
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public catlistUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public catlistUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public catlistUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public catlistUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/chart/catlist`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * chartEtatCompteDay
     * 
     * @param body graphe
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chartEtatCompteDayUsingPOST(body: GrapheDTO, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: Array<Mapstringfloat>; }>;
    public chartEtatCompteDayUsingPOST(body: GrapheDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: Array<Mapstringfloat>; }>>;
    public chartEtatCompteDayUsingPOST(body: GrapheDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: Array<Mapstringfloat>; }>>;
    public chartEtatCompteDayUsingPOST(body: GrapheDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling chartEtatCompteDayUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: Array<Mapstringfloat>; }>('post',`${this.basePath}/chart/etat-compte-day`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * chartEtatCompteMois
     * 
     * @param body graphe
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chartEtatCompteMoisUsingPOST(body: GrapheDTO, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: Array<Mapstringfloat>; }>;
    public chartEtatCompteMoisUsingPOST(body: GrapheDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: Array<Mapstringfloat>; }>>;
    public chartEtatCompteMoisUsingPOST(body: GrapheDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: Array<Mapstringfloat>; }>>;
    public chartEtatCompteMoisUsingPOST(body: GrapheDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling chartEtatCompteMoisUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: Array<Mapstringfloat>; }>('post',`${this.basePath}/chart/etat-compte-month`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * chartMonth
     * 
     * @param body graphe
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chartMonthUsingPOST(body: GrapheDTO, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: Array<Mapstringdouble>; }>;
    public chartMonthUsingPOST(body: GrapheDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: Array<Mapstringdouble>; }>>;
    public chartMonthUsingPOST(body: GrapheDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: Array<Mapstringdouble>; }>>;
    public chartMonthUsingPOST(body: GrapheDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling chartMonthUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: Array<Mapstringdouble>; }>('post',`${this.basePath}/chart/month-chart`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * chartYear
     * 
     * @param body graphe
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chartYearUsingPOST(body: GrapheDTO, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: Array<Mapstringdouble>; }>;
    public chartYearUsingPOST(body: GrapheDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: Array<Mapstringdouble>; }>>;
    public chartYearUsingPOST(body: GrapheDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: Array<Mapstringdouble>; }>>;
    public chartYearUsingPOST(body: GrapheDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling chartYearUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: Array<Mapstringdouble>; }>('post',`${this.basePath}/chart/year-chart`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * chartcatgroupe
     * 
     * @param body graphe
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chartcatgroupeUsingPOST(body: DashboarGrapheDTO, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: Array<Mapstringdouble>; }>;
    public chartcatgroupeUsingPOST(body: DashboarGrapheDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: Array<Mapstringdouble>; }>>;
    public chartcatgroupeUsingPOST(body: DashboarGrapheDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: Array<Mapstringdouble>; }>>;
    public chartcatgroupeUsingPOST(body: DashboarGrapheDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling chartcatgroupeUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: Array<Mapstringdouble>; }>('post',`${this.basePath}/chart/dashboard-chartcatgroupe`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * chartprevisionDepOuRecMois
     * 
     * @param body graphe
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public chartprevisionDepOuRecMoisUsingPOST(body: GrapheDTO, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: Array<Mapstringfloat>; }>;
    public chartprevisionDepOuRecMoisUsingPOST(body: GrapheDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: Array<Mapstringfloat>; }>>;
    public chartprevisionDepOuRecMoisUsingPOST(body: GrapheDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: Array<Mapstringfloat>; }>>;
    public chartprevisionDepOuRecMoisUsingPOST(body: GrapheDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling chartprevisionDepOuRecMoisUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: Array<Mapstringfloat>; }>('post',`${this.basePath}/chart/prevision-depense-chart`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * libellelist
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public libellelistUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public libellelistUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public libellelistUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public libellelistUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/chart/libellelist`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * monthlist
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public monthlistUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public monthlistUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public monthlistUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public monthlistUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/chart/monthlist`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * pie2
     * 
     * @param body graphe
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pie2UsingPOST(body: DashboarGrapheDTO, observe?: 'body', reportProgress?: boolean): Observable<Array<Mapstringdouble>>;
    public pie2UsingPOST(body: DashboarGrapheDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Mapstringdouble>>>;
    public pie2UsingPOST(body: DashboarGrapheDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Mapstringdouble>>>;
    public pie2UsingPOST(body: DashboarGrapheDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling pie2UsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<Mapstringdouble>>('post',`${this.basePath}/chart/dashboard-chartPie`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * pieChartdeprec
     * 
     * @param body graphe
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pieChartdeprecUsingPOST(body: DashboarGrapheDTO, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: Array<Mapstringdouble>; }>;
    public pieChartdeprecUsingPOST(body: DashboarGrapheDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: Array<Mapstringdouble>; }>>;
    public pieChartdeprecUsingPOST(body: DashboarGrapheDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: Array<Mapstringdouble>; }>>;
    public pieChartdeprecUsingPOST(body: DashboarGrapheDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling pieChartdeprecUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: Array<Mapstringdouble>; }>('post',`${this.basePath}/chart/dashboard-chartdeprec`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * pieMonth
     * 
     * @param body graphe
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pieMonthUsingPOST(body: GrapheDTO, observe?: 'body', reportProgress?: boolean): Observable<Array<Mapstringdouble>>;
    public pieMonthUsingPOST(body: GrapheDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Mapstringdouble>>>;
    public pieMonthUsingPOST(body: GrapheDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Mapstringdouble>>>;
    public pieMonthUsingPOST(body: GrapheDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling pieMonthUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<Mapstringdouble>>('post',`${this.basePath}/chart/month-pie`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * pie
     * 
     * @param body graphe
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pieUsingPOST(body: DashboarGrapheDTO, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: Array<Mapstringdouble>; }>;
    public pieUsingPOST(body: DashboarGrapheDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: Array<Mapstringdouble>; }>>;
    public pieUsingPOST(body: DashboarGrapheDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: Array<Mapstringdouble>; }>>;
    public pieUsingPOST(body: DashboarGrapheDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling pieUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: Array<Mapstringdouble>; }>('post',`${this.basePath}/chart/dashboard-chart`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * pieYear
     * 
     * @param body graphe
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pieYearUsingPOST(body: GrapheDTO, observe?: 'body', reportProgress?: boolean): Observable<Array<Mapstringdouble>>;
    public pieYearUsingPOST(body: GrapheDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Mapstringdouble>>>;
    public pieYearUsingPOST(body: GrapheDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Mapstringdouble>>>;
    public pieYearUsingPOST(body: GrapheDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling pieYearUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<Mapstringdouble>>('post',`${this.basePath}/chart/year-pie`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * pieprevisionDepOuRecMois
     * 
     * @param body graphe
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pieprevisionDepOuRecMoisUsingPOST(body: GrapheDTO, observe?: 'body', reportProgress?: boolean): Observable<Array<Mapstringdouble>>;
    public pieprevisionDepOuRecMoisUsingPOST(body: GrapheDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Mapstringdouble>>>;
    public pieprevisionDepOuRecMoisUsingPOST(body: GrapheDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Mapstringdouble>>>;
    public pieprevisionDepOuRecMoisUsingPOST(body: GrapheDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling pieprevisionDepOuRecMoisUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<Mapstringdouble>>('post',`${this.basePath}/chart/prevision-depens-pie`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * yearlist
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public yearlistUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public yearlistUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public yearlistUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public yearlistUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/chart/yearlist`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
